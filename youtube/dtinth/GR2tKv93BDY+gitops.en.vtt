[@0.00]
Hello! Today I will talk about…

[@3.75]
GitOps in Weird Places.

[@10.06]
I will introduce myself. My name is Thai.

[@12.00]
I am a software engineer at Eventpop.

[@15.00]
I am in the group called Creatorgarten.

[@19.00]
It is a group of people who are interested
in learning, creating, and so on.

[@24.00]
We organize tech events about things we’re
interested in and want to see happen.

[@31.00]
Most of these events are free events.

[@33.22]
You can follow us on Creatorgarten’s
website and Facebook Page.

[@37.00]
When we organize events —

[@40.48]
Sometimes we run hackathon events.

[@43.00]
Sometimes there are codes involved.

[@47.00]
Almost all of them are
open source on GitHub

[@49.25]
So it can be used as a reference
and others can learn from it.

[@54.00]
We have used GitOps a lot
in the Creatorgarten organization.

[@58.00]
What is GitOps?

[@60.38]
Today I will tell you what it is

[@64.96]
and what you can do with it.

[@67.26]
Another name of GitOps is
“Operations by Pull Request.”

[@71.00]
Before I explain,
I will show you the demo.

[@74.00]
We have a Discord server called
Bangkok Open Source Initiative.

[@79.00]
It is a community server
for those who do open source.

[@83.00]
We’re also running the
Bangkok Open Source Hackathon event.

[@86.00]
Actually, tomorrow there
will be a second workshop.

[@89.73]
-

[@93.51]
When we create a community Discord server,

[@98.61]
There must be a #rules channel.

[@104.00]
I don’t know what to put in,

[@106.33]
So I wrote the first rule of the server:

[@108.00]
“Please read the rules.”

[@110.05]
-

[@112.73]
The problem is that no one
can edit my messages.

[@119.00]
Only the person who wrote the message
can edit their own messages.

[@125.00]
If any admin wants to change the rules,
they must ask me to fix it.

[@130.00]
Or they must delete my message
and write a new one.

[@133.00]
Neither way is convenient.

[@135.00]
This is a feature that many admins
are asking for from Discord.

[@142.00]
But 3 years have passed
and we still don’t have this feature.

[@146.00]
But with a GitOps mindset,
I have a solution.

[@151.00]
This is the Discord server.

[@154.00]
This is the server rules.

[@157.00]
You will see that it is not posted by
a human. This is the GitOps bot.

[@160.00]
At the bottom, there will be a link
that says “Edit this text.”

[@164.00]
When you click this link,
it will take you to GitHub.

[@169.00]
This is GitHub.

[@171.00]
There will be a file named “rules.txt.”

[@174.00]
You can go to the edit button.

[@177.00]
You can change the text.

[@179.00]
For example, I put in the word Sunday.

[@183.00]
Sunday, February 26th.

[@186.00]
And click “Commit.”

[@188.00]
When committed, what happens?

[@191.00]
GitHub Action will trigger.

[@195.00]
Go to Actions.

[@197.00]
After that, the action will start working.

[@200.00]
I will skip to this page.

[@202.00]
And it will run the script.

[@204.00]
When the script is finished,
the word “Sunday” will appear.

[@209.80]
-

[@211.81]
Therefore, GitOps is like
using Git as a source of truth.

[@217.00]
Hope you get a better picture.

[@220.00]
But we haven’t really defined it.

[@223.00]
What is GitOps?

[@225.00]
^Let’s look at the history.

[@227.00]
^It was created in 2017

[@231.86]
^By a company called Weaveworks.

[@234.00]
^If you read the article
`“The history of GitOps”`

[@237.00]
^It will tell you that in 2016,

[@241.00]
^An engineer tried to deploy
a change to the system.

[@247.75]
^If it works, it’s okay.

[@249.97]
^But if it doesn’t work, it
“could wipe out the entire system.”

[@254.00]
^Well, “the system was wiped out.”

[@256.00]
^But something really cool happened.

[@261.00]
^“the Weaveworks team was able to bring
the system back up in about 40 minutes”

[@266.00]
^They are “pleased with their progress.”

[@270.00]
^“the team sat together and
made a list of these principles”

[@275.00]
^And the CEO realized that

[@278.68]
^“one word that describes
all of this was ‘GitOps.’”

[@285.00]
^So they tried to describe
“the principles of GitOps.”

[@288.00]
Later, it became a project
called OpenGitOps.

[@292.00]
Let’s see what it has to say.

[@298.66]
“GitOps is a set of principles for
operating and managing software systems.”

[@305.00]
GitOps is usually used
in the context of Kubernetes.

[@311.00]
Because it’s where GitOps comes from.

[@314.00]
The most popular tools in the world of
Kubernetes are Flux and ArgoCD.

[@319.00]
But I don’t use Kubernetes.

[@322.00]
Running a Kubernetes cluster
can be expensive.

[@326.00]
I usually use serverless.

[@329.00]
The good thing about serverless is that —

[@332.10]
-

[@334.41]
In the talk before this one,
Smith talks about serverless.

[@337.00]
I really like the Logic Apps.

[@340.00]
I tried creating a Function App before.

[@342.43]
When prototyping, sometimes I forgot
a comma and the function crashed.

[@346.78]
Sometimes I put in the wrong parameter,
deploy it, and get a 500 error.

[@352.00]
Logic App seems like an easier option,
it feels like the Shortcuts app.

[@357.00]
I’ll try it out!

[@360.00]
Thank you for selling it.

[@363.00]
I like serverless because my personal
projects and Creatorsgarten’s projects —

[@368.24]
They do not have many users.
No need to scale to the masses.

[@371.13]
Running servers can be expensive.

[@373.00]
But with serverless —
last month, I paid Azure

[@375.55]
A total of one dollar.

[@378.28]
(Audience from Microsoft) Thank you.

[@380.38]
It’s very cost-effective
to use serverless in my case.

[@385.00]
Let’s talk about GitOps.

[@388.00]
OpenGitOps has 4 principles.

[@392.00]
Let’s see what are the 4 principles.

[@395.00]
The first one is “Declarative.”

[@399.00]
This principle says that the system
that we will manage with GitOps —

[@403.00]
First, we have to explain what we want.

[@408.00]
They use the word “desired state.”

[@411.00]
It’s like a description of the situation
that we want our system to be in.

[@417.00]
For example,

[@419.45]
The rules.txt file describes
“what should be in the #rules channel.”

[@426.00]
Next, “Versioned and Immutable.”

[@429.00]
We have to put this file
in a version control system.

[@434.00]
This file is stored on GitHub.

[@437.00]
Next, “Pulled Automatically.”

[@440.00]
There must be a software agent

[@443.58]
That pulls this declaration automatically.

[@449.00]
The moment I push to GitHub,

[@451.38]
GitHub Action automatically runs.

[@454.00]
The last one is “Continuously Reconciled.”

[@458.00]
There must be a software agent
that checks the current state

[@465.00]
And compare it with what we want.

[@467.00]
And make it consistent.

[@469.00]
And do it continuously.

[@473.00]
These are the 4 principles.

[@475.00]
In this example,

[@476.22]
A script run by GitHub Actions
will update the message in Discord

[@480.00]
To match the declaration in Git.

[@482.00]
There are 2 main ways to implement GitOps.

[@488.00]
Push-based and pull-based.

[@490.00]
Both ways are viable.

[@492.00]
Push-based is like we have a system
that is just sits there.

[@498.00]
If we don’t do anything to it,
it will stay the same.

[@501.00]
But what we do is we put our
config files in a GitHub repo.

[@507.00]
And as soon as we push,

[@509.10]
A CI process will start working.

[@512.00]
And it will make change to the system

[@515.00]
As we desired.

[@518.00]
This means that our CI process

[@522.09]
Must hold a key that gives it
permission to change the system.

[@529.00]
It means that our system must open a way
for external systems, like the CI,

[@534.64]
To make changes to it.

[@536.00]
Some people sees it as a security risk.

[@540.00]
Especially if it’s Kubernetes.

[@542.00]
Some people put the cluster in a VPC.

[@545.00]
And external CI can’t connect to it.

[@548.00]
In short — the Kubernetes community seems
to not prefer the push-based approach.

[@553.00]
If we’re in the Kubernetes world,
we’ll mostly use a pull-base solution.

[@559.00]
What is pull-based?

[@561.00]
We put a “GitOps operator” in the system.

[@566.00]
And GitOps operator will
pull the code from GitHub

[@569.00]
And make changes to the system.

[@573.00]
The good thing is that everything
happens inside the system.

[@576.00]
You don’t have to set up
anything complicated.

[@580.00]
Although setting up Kubernetes
can be complicated in and of itself.

[@583.00]
Everything happens in the system.

[@586.00]
^The first Discord example I showed you
is using a push-based approach.

[@590.00]
^Let’s look at this
from an even higher level.

[@595.00]
You can see that GitOps
consists of 3 main parts.

[@601.00]
The leftmost part is Git

[@604.60]
It keeps the desired state

[@606.00]
That describes what condition
we want our system to be in.

[@610.00]
On the right is the actual system.

[@613.00]
And in the center is a
reconciliation system.

[@617.00]
It reconciles the left side
and the right side.

[@620.00]
It adjusts the right side
to what we want on the left.

[@624.00]
How do we create a reconciler?

[@628.00]
The answer is it depends.

[@631.00]
It depends on how you use it.

[@633.00]
If you use Kubernetes,
you can use Argo or Flux.

[@636.00]
As for other cases, we’ll see.

[@638.00]
First example — cloud infrastructure

[@641.00]
Such as AWS, Azure, Google Cloud.

[@645.00]
If we do manual operation?

[@648.00]
If we don’t have GitOps yet,
how do we do manual operation?

[@651.00]
Go to the Portal and do things one by one.

[@654.00]
Create, Fill in forms, Review + Create, …

[@657.72]
There are many steps involved.

[@660.74]
Actually Azure is pretty easy already.

[@662.84]
Once the resource is created

[@664.40]
I get a connection string
that I can use immediately

[@667.59]
In some providers I have to create a user.

[@669.58]
Then put a user in a group.

[@670.76]
And then create a role.

[@672.00]
And then assign that role to the group.

[@674.07]
And then attach a policy to the role.

[@676.00]
Or maybe I have to create a
service account, create a key, etc.

[@680.00]
If we have to do a lot of of these —

[@684.21]
By the way this is an contrived example.

[@686.00]
If we have to do a lot of of these,

[@687.62]
It can be error-prone.

[@688.56]
I don’t have any example of a big system

[@692.00]
So I’ll steal the slide

[@695.60]
From the previous speaker, k’ Pong.

[@699.99]
Thank you for that slide.

[@702.00]
There are many customers, right?

[@705.00]
Lots of resources to manage.

[@708.60]
If we have to do same thing many times,

[@712.49]
One way to improve is to
create scripts and do automation.

[@715.00]
For example, I use Azure CLI
to create resources.

[@720.00]
As I showed you earlier.

[@722.00]
The problem is that this script
only lets me create resources.

[@724.50]
If I want to delete,
then I have to write another script.

[@727.00]
And if I try to create
and there’s something wrong,

[@730.14]
What should I do?

[@731.00]
I might have to run the delete script
and then run the create script again.

[@735.00]
And sometimes if we run the create script

[@737.73]
And it fails midway?

[@739.00]
And when we run it again, it doesn’t work

[@743.30]
Because some objects alrady exist.

[@744.76]
We have to delete and then
create the whole thing again.

[@747.00]
This is a problem of running scripts.

[@750.00]
But as far as I’ve tested, this script
doesn’t have any problems running twice.

[@755.00]
Because in Azure, if we try to
create something that already exists

[@758.60]
And all the parameters match up,
it will be considered successful.

[@762.00]
Now let’s see what happens with GitOps.

[@766.00]
Back to the first principle.

[@772.00]
We have to be able to describe
our system in a declarative way.

[@777.00]
I’m not sure how to say “declarative”
in Thai. Can anyone translate it for me?

[@783.00]
What is “declarative” in Thai?

[@785.00]
(Audience) It’s declared.

[@787.00]
The opposite word is imperative.

[@792.51]
(Audience) It’s like a command.

[@794.29]
Thank you very much.

[@796.18]
When I prepared this talk,
I couldn’t find any good translation.

[@799.81]
So I’ll teach these English terms
by giving you some examples.

[@804.14]
Imperative means I specify what to do.

[@807.00]
It’s like a step-by-step instructions.

[@809.00]
Create this, create that, create this.

[@811.00]
Imperative is telling what to do.

[@814.00]
A script is considered imperative too.

[@817.00]
On the other hand, “Declarative” —

[@821.00]
We don’t specify how to do it.

[@823.00]
We just specify what we want.

[@824.43]
We want a Resource group

[@825.61]
With a Log Analytics workspace that is
linked to this Resource group.

[@828.62]
And an Application Insights component
linked to this Workspace.

[@833.83]
This is what I want.

[@835.25]
How do we set it?

[@836.24]
Go figure.

[@837.88]
Can we turn this into a code?

[@841.29]
Sure!

[@842.38]
Azure has its own language for this.

[@844.34]
Bicep.

[@846.00]
But if we want something more
cloud provider agnostic,

[@849.92]
We can use Terraform or Pulumi.

[@854.00]
Pulumi allows us to express what we want

[@860.00]
By using TypeScript.

[@862.00]
I’m a JavaScript developer

[@864.00]
So I use TypeScript.

[@866.00]
So that I don’t have to learn new syntax.

[@868.00]
Another great thing is that TypeScript —

[@870.00]
Its trained model is very good.

[@872.00]
GitHub Copilot —

[@875.16]
GitHub Copilot has been trained
on a lot of TypeScript code.

[@879.00]
A lot of things you see here —

[@882.83]
Here I have a BlobContainer

[@885.00]
I want a shared access key.

[@887.00]
Copilot writes it for you.

[@889.00]
All of this,

[@891.00]
GitHub Copilot writes it all.

[@895.00]
Ok, so we have the desired state.

[@898.00]
It’s this Pulumi TypeScript file.

[@900.00]
I push it up to GitHub.

[@902.00]
GitHub Action starts running.

[@904.00]
And GitHub Action runs `pulumi up`.

[@906.00]
Pulumi will start comparing.

[@910.00]
The desired state — this TypeScript file.

[@912.00]
The actual system state — nothing yet.

[@916.00]
^It devises a plan.

[@918.00]
^The plan describes what will be created.

[@920.00]
^And it will execute the plan
against our cloud service.

[@923.00]
^Let’s say I remove this part.

[@925.00]
^Cut it off.

[@927.00]
^And we push it up again.

[@929.00]
^What happens?

[@930.53]
^It knows that this time,

[@932.15]
^We desire two things.

[@934.00]
^But in the real system, there are 3.

[@936.00]
^So this should be deleted.

[@939.55]
^Pulumi will go ahead and delete it.

[@941.99]
So for cloud infrastructures,

[@944.00]
I suggest that you don’t write
your own reconciliation engine.

[@947.00]
Because it’s very complex.

[@949.00]
Sometimes we have to create one thing
before creating the other thing.

[@952.00]
It’s complicated.

[@953.73]
And just handling
the creation is not enough

[@955.55]
We must handle updating
and deleting as well.

[@958.00]
It’s good to use off-the-shelf tools.

[@960.77]
-

[@963.04]
Ok, we’ve GitOpsed our
cloud infrastructure.

[@965.00]
What else can we GitOps?

[@969.31]
Can we GitOps our GitHub organization?

[@973.83]
If I’m in an organization
and I’m not an admin.

[@977.00]
When I want a team or a repo.

[@980.00]
I’ll have to ask the admin
to help me create a team.

[@984.33]
Create a repository.

[@986.20]
Add 7 people.

[@987.89]
Grant write access.

[@990.29]
The admin will have to invite 7 people.

[@993.99]
^Following the steps in the UI.

[@996.58]
^And then come back and say “all done.”

[@998.85]
^It turns out that there are 8 people.

[@1000.62]
^And it’s the same loop.

[@1003.21]
But in Pulumi,

[@1004.99]
They have a GitHub provider.

[@1008.50]
And because it’s TypeScript,

[@1010.00]
We can create our own DSL.

[@1013.29]
Extract common patterns into a function.

[@1015.62]
Now can write code like this.

[@1017.00]
This is real code in the repository

[@1020.91]
In the Creatorsgarten organization.

[@1023.00]
It only takes…

[@1025.86]
Just one line to add new people.

[@1028.00]
And when it’s a pattern like this.

[@1029.39]
Anyone who wants to join the project

[@1032.00]
Can send a pull request.

[@1034.00]
It’s operations by pull request.

[@1036.00]
The various functions you see here

[@1040.00]
Will call into Pulumi under the hood.

[@1045.24]
-

[@1047.53]
Ok, when I push it to GitHub,

[@1050.00]
I get a team.

[@1052.00]
Now we have a GitHub team.

[@1054.00]
And now we can push our code.

[@1058.36]
Creatorsgarten — our group is quite open.

[@1062.00]
We announced that anyone who
participated in our event

[@1066.00]
Can join our club

[@1069.00]
By sending a pull request to this file.

[@1071.00]
Just put the GitHub username in.

[@1074.00]
The list looks like this.

[@1077.00]
If anyone wants to apply,

[@1079.00]
They know what to do.

[@1081.00]
Just add one line of data to the file

[@1084.18]
And send us a pull request.

[@1087.00]
When we merge the PR,

[@1089.00]
Pulumi will automatically send the invite.

[@1094.14]
Now our group has 41 people.

[@1096.37]
And now we’ve become the organization

[@1098.46]
With the most number of active
GitHub users on in Thailand.

[@1104.50]
-

[@1106.67]
Besides this.

[@1110.36]
The second principle of GitOps states that

[@1113.37]
We have to put our desired state file

[@1116.00]
In a place where it can be
version-controlled.

[@1118.00]
So we can see a history of
what happened in our organization.

[@1123.19]
What is this?

[@1124.53]
Ah! Ok, this is what happened.

[@1126.75]
I invited n’Pub to join the organization.

[@1131.00]
However, he did not accept it in 7 days.

[@1136.00]
So the invitation expired.

[@1138.00]
I had to fire him

[@1140.68]
So that I can invite him back.

[@1143.34]
Like this.

[@1144.41]
This is the second example.

[@1145.69]
The third example.

[@1148.00]
Can we use GitOps with a website?

[@1150.00]
^If you’ve used GitHub Pages before,
the GitOps concept may feel familiar.

[@1154.00]
^Because when we push to a repo with
GitHub Pages set up, after a while,

[@1158.00]
^It deploys the website for us.

[@1160.00]
^It seems to me that GitHub Pages

[@1164.00]
^follows all 4 GitOps principles.

[@1166.00]
^That’s GitOpsing since 2008.

[@1170.00]
^That is 9 years before
the term GitOps was coined.

[@1175.80]
Or if we use Netlify.

[@1177.93]
Sometimes we have a domain.

[@1180.14]
And we want to do URL Redirection.

[@1182.13]
Normally we have to use bit.ly
or something similar.

[@1184.53]
We have to pay.

[@1186.00]
Or maybe use Firebase Dynamic Links,

[@1188.00]
We have to invite people to our Firebase
project so they can create short links.

[@1192.00]
We can instead put a _redirects
file inside a Git repo.

[@1196.00]
So we can manage all the URL redirects

[@1201.35]
-

[@1202.81]
Using Netlify.

[@1205.04]
Next.

[@1207.47]
Domain name.

[@1208.55]
Can we GitOps a domain name?

[@1210.92]
This is a real example of me
chatting with Poom.

[@1214.00]
He holds the creatorsgarten.org domain.

[@1217.08]
I want to add a CNAME.

[@1219.29]
But I don’t have admin access.

[@1220.80]
I have to send an access like this.

[@1224.06]
Okay.

[@1226.00]
There is another domain that I registered.

[@1228.00]
source.in.th

[@1230.00]
And I thought, I want to make
this domain easy to manage.

[@1234.00]
So I adopted GitOps.

[@1236.00]
What I did is:

[@1238.00]
I created a repo called source.in.th.

[@1242.00]
But this time I didn’t use Pulumi.

[@1244.00]
I think my use case is very simple.

[@1246.00]
I don’t have to use Pulumi.

[@1248.00]
When I set up Pulumi, I have to set up
the state storage account.

[@1254.00]
But Cloudflare has an API
that is very easy to use.

[@1258.00]
I can just create an API key
and call APIs with it.

[@1261.30]
Also,

[@1262.19]
DNS records don’t depend on each other.

[@1266.00]
So when creating and deleting,

[@1268.00]
It’s not difficult.

[@1270.00]
I created a GitHub workflow.

[@1272.00]
^When I push new code, it runs update.mjs.

[@1278.00]
At the top, there will be a list of
DNS records that we want to have.

[@1284.00]
And below is a synchronization script.

[@1288.00]
^It will check the current state.

[@1289.69]
^Which records are there?

[@1291.57]
^Which records do I have to add or modify?

[@1294.00]
^At the bottom, the tasks are executed.

[@1300.00]
^Actually, there is more code below that.

[@1302.00]
^It’s just calls the Cloudflare API.

[@1305.31]
^No dependencies needed, just a
fetch() call in Node.js.

[@1310.00]
Now we have DNS records
written in a file on GitHub.

[@1316.00]
People can send me pull requests.

[@1320.00]
Here, n’Riffy sent me a pull request

[@1324.00]
To create a subdomain lamb.source.in.th.

[@1328.00]
When I go there,

[@1330.00]
I see Hell’s Kitchen.

[@1332.00]
And asked WHERE’S THE LAMB SAUCE?

[@1336.00]
^So, GitOps lets anyone contribute

[@1342.00]
^Even if they’re not an admin.

[@1346.00]
^They can open pull requests
to participate in the project.

[@1350.00]
I’ll show you how the reconciler works

[@1356.00]
So you know how to write
your own reconciler.

[@1359.24]
1. Load the desired state.

[@1362.00]
2. Query the current system state.

[@1366.00]
3. Compare them.

[@1368.00]
Here, let’s compare like this.

[@1370.00]
When compared, we will know.

[@1372.00]
What to create, what to delete,
what to update.

[@1374.00]
And we’ll apply it to the real system.

[@1376.00]
It will be like this.

[@1379.36]
-

[@1380.73]
Example 5 — Discord server.

[@1382.62]
This is the demo in the beginning.

[@1384.14]
I’ll show you how I created it.

[@1387.03]
I also wrote my own reconciler here.

[@1388.81]
In a Discord channel,
we can create “webhooks.”

[@1392.00]
^When created, the webhook will
be linked to the channel

[@1395.42]
^And we will get a URL.

[@1396.96]
We can use this URL and sent it
an HTTP POST request.

[@1399.71]
Send it some content.

[@1402.75]
And the bot will post on the channel.

[@1406.33]
It will also return an ID.

[@1408.47]
We can use this ID to send

[@1410.45]
An HTTP PATCH request.

[@1415.02]
The message will be edited.

[@1419.23]
This makes it easy.

[@1420.15]
^I wrote this 34-line script.

[@1423.33]
^It reads the rules.txt file,

[@1425.52]
^Split into smaller messages.

[@1428.65]
^And send a PATCH request
to the specified message IDs.

[@1431.71]
^Something like this.

[@1432.92]
^It’s convenient.

[@1434.48]
-

[@1438.14]
In this example, the script I wrote is
simpler than the previous one.

[@1442.00]
It loads the desired state

[@1445.38]
And set the actual system state to it.

[@1447.42]
No need to check how it
originally looks like.

[@1450.66]
Just replace the contents.

[@1453.96]
^I started by writing some simple message

[@1459.07]
^And added a link to “edit the message.”

[@1462.00]
^Then someone contributed.

[@1463.55]
^I’m not experienced at managing
a Discord community.

[@1466.00]
^I don’t know what to put in the rules.

[@1468.00]
^Someone contributed.

[@1470.00]
^They added a bunch of rules.

[@1472.00]
^The contributor doesn’t even
have to be a server admin.

[@1474.43]
^Even then, they can help setting
the rules for our server.

[@1479.60]
^Thanks to @Thanyanit-J for this!

[@1483.08]
-

[@1485.16]
By the way,

[@1486.38]
If you use Terraform.

[@1488.08]
There’s a Discord provider.

[@1489.82]
If you want to manage
more than just messages,

[@1492.00]
You want to manage roles,
categories, and channels,

[@1497.38]
You can do it with Terraform.

[@1501.51]
-

[@1502.70]
The last example.

[@1504.41]
YouTube channel.

[@1506.00]
Can we GitOps it?

[@1510.00]
This is the Creatorsgarten
YouTube channel.

[@1512.00]
We organize tech meetups.

[@1514.00]
When speakers present, after going live,

[@1520.00]
We cut the clips

[@1521.40]
And upload them to our YouTube channel.

[@1524.00]
Now there are only 150 subscribers.

[@1526.51]
It’s a new channel.

[@1528.17]
Please consider subscribing to it.

[@1532.00]
In each video,

[@1534.00]
I want it to have a description

[@1535.69]
In a consistent format.

[@1538.00]
^This is the description.

[@1540.00]
^If I have to write them all,

[@1542.00]
^It’s exhausting.

[@1544.00]
^I wanted to automate the process.

[@1546.00]
^It’s not just this.

[@1548.00]
^Talk description, timestamps, etc.

[@1549.80]
^If you want the video to be able
to reach an international audience.

[@1552.60]
^It should have an English description.

[@1556.00]
^If you set the language
in YouTube to English,

[@1560.00]
^You will get an English description.

[@1562.00]
^In some talks,

[@1566.00]
^If the speaker has the time to do it,

[@1569.50]
^They can upload an English subtitle
to the video on our channel.

[@1574.00]
^Besides this.

[@1576.00]
^If we use the talk title
as the video title,

[@1578.22]
^Sometimes it’s not as engaging.

[@1579.59]
^We have to make it possible to
customize the video title,

[@1585.26]
^Both Thai and English.

[@1588.23]
-

[@1589.48]
Finally, the thumbnail.

[@1592.00]
All of these can be edited
by sending us a pull request.

[@1594.56]
There are many speakers in our group.

[@1598.64]
But not all speakers has access
to our channel’s YouTube Studio.

[@1602.00]
By using GitOps, anyone can contribute.

[@1606.00]
^Like I said.

[@1608.00]
^Everything is on a GitHub repo

[@1610.00]
^creatorsgarten/videos.

[@1614.00]
^In each folder there will be talk files.

[@1617.13]
^There will be an .md file
that stores the metadata.

[@1620.00]
^It contains a YAML frontmatter.

[@1622.00]
-

[@1624.00]
^At the top is a JPEG file.

[@1626.00]
^It’s the thumbnail of the video.

[@1628.00]
^And at the bottom is a subtitles file.

[@1631.41]
-

[@1632.88]
^When I made this pipeline,

[@1634.00]
^There was a couple of problems.

[@1636.00]
YouTube API.

[@1637.33]
There’s a daily quota.

[@1639.77]
If we use the API a lot,

[@1640.85]
The quota is full.

[@1641.90]
Can no longer use the API.

[@1643.44]
Failed.

[@1645.37]
Moreover, there’s no YouTube provider
for either Pulumi or Terraform.

[@1650.00]
That’s completely understandable.

[@1654.00]
But it means that I have to write
my own reconciler again.

[@1659.37]
The technique is:

[@1660.92]
^I created a “local database.”

[@1664.07]
^The principles are the same.

[@1665.59]
^But instead of querying the YouTube API,

[@1669.29]
^We query this local database instead.

[@1672.00]
-

[@1674.00]
(1.) and (2.) are the same,

[@1676.00]
We just query the local database instead.

[@1678.00]
And we’ll get the same change.

[@1680.00]
^And we’ll apply it to the real system.

[@1682.00]
^And when it’s applied to the real system.

[@1684.00]
^We can update our local database.

[@1686.78]
^Now,

[@1687.76]
Where to keep the local database?

[@1689.64]
I keep it in the same Git repo,

[@1691.45]
in a file called `youtube-sync.yml`.

[@1694.00]
It will keep all the states.

[@1696.00]
^For example,

[@1698.00]
^When updating a thumbnail file,

[@1700.00]
^I’ll keep the file hash,

[@1701.50]
^So that in the future,

[@1703.33]
^If the file changes,

[@1704.60]
^We can compare the hash with this state.

[@1708.00]
^If the hash is unchanged,
we don’t have to upload it again.

[@1713.74]
^The same goes for subtitles.

[@1716.35]
^As well as video metadata.

[@1718.68]
^We can compare between the contents
currently on the channel

[@1722.73]
^And what we want it to be

[@1724.41]
^Without having to call the YouTube API.

[@1727.09]
^Finally, when we upload a caption
to the YouTube API.

[@1730.85]
^It will give you an ID.

[@1732.74]
^If we go back to the previous slide.

[@1734.23]
^You’ll see that just listing the
video captions costs 50 points.

[@1740.90]
-

[@1742.00]
^So, I keep the ID in the local state.

[@1746.27]
^When we update the caption,
we know which caption ID to update.

[@1750.22]
^Without having to query the YouTube API.

[@1754.23]
^So, how does this work in practice?

[@1755.72]
^When I want to publish a video,

[@1759.98]
^I just change the metadata file
from published: false to true.

[@1763.02]
^When GitHub Actions finishes running,

[@1764.74]
^It will update the database.

[@1766.31]
^From the `privacyStatus` that
was `unlisted`, it is now `public`.

[@1771.63]
Now,

[@1773.09]
When we add a new video.

[@1774.00]
What do we do?

[@1775.24]
1. I uploaded the video on YouTube.

[@1778.00]
But I didn’t put any description.

[@1780.00]
No metadata whatsover. All default.

[@1782.00]
Then I copied the URL.

[@1784.00]
Once I copied the URL,

[@1786.00]
I ran the `import` script.

[@1790.00]
Put the URL in.

[@1792.00]
Put in the talk name and event name.

[@1794.00]
Do this to all the uploaded videos.

[@1796.00]
Then it will generate these data files.

[@1800.00]
The JPEG files are the thumbnails
that YouTube automatically generates.

[@1804.00]
They will be imported into the project.

[@1807.03]
Then,

[@1808.00]
Here’s the template file.

[@1810.75]
I’ll put the information in like this.

[@1815.66]
Then I run the sync command.

[@1819.27]
It will let us preview

[@1821.01]
Based on the data in Git right now,

[@1824.00]
What changes will happen to our channel.

[@1826.00]
The output says that it’s gonna update

[@1832.00]
The description of this video.

[@1834.00]
The status is unlisted.

[@1836.00]
Because it’s not published yet.

[@1838.00]
Since the local database
is in the same repo.

[@1842.00]
Anyone can run this command
to preview the changes,

[@1844.34]
Even if they don’t have
the YouTube API credentials.

[@1848.00]
The changes can be easily previewed.

[@1850.00]
Then it’s the same GitOps workflow.

[@1853.06]
Push to Git.

[@1854.39]
GitHub Actions starts working.

[@1857.50]
^When you press refresh.

[@1859.16]
^It will be like this. (Tada.)

[@1861.53]
^All the descriptions are here now.

[@1864.00]
^Here’s the original thumbnail.

[@1866.00]
^We replaced it with a
slightly better thumbnail.

[@1872.00]
^Then the updated state file
is saved back to GitHub.

[@1878.00]
^Everything is now up-to-date.

[@1882.00]
^So —

[@1884.00]
^About running a YouTube channel,

[@1886.00]
^I don’t have much experience.

[@1888.00]
^And —

[@1890.00]
^But I know

[@1892.00]
That there are people who knows
how to manage a YouTube channel.

[@1895.04]
There are people who know better than me.

[@1896.76]
-

[@1900.23]
Those people should have the power to
improve and grow our YouTube channel.

[@1906.00]
Using GitOps —

[@1908.00]
I think it’s a really great way

[@1913.44]
To empower people in the community

[@1916.00]
To create things together.

[@1920.00]
So.

[@1921.26]
When I think of GitOps a lot.

[@1924.00]
I look at various systems and
see how GitOps may be applied.

[@1928.00]
A question may arise:

[@1930.00]
What else can we GitOps?

[@1932.51]
-

[@1933.62]
That’s the end of the presentation.
Thank you very much!

[@1938.00]
-

