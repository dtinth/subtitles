[@0.00]
Hello everyone.

[@2.00]
When I was a student,

[@7.00]
There was one very difficult subject.

[@10.54]
As you might have guessed,

[@12.26]
It was a math subject.

[@14.00]
Especially calculus, trigonometry,
vectors, and matrices.

[@18.00]
When I was studying, I wasn't into math.

[@21.00]
I had to memorize a lot of formulas.

[@22.87]
Here’s the derivatives formulas.

[@24.75]
I have to memorize it to take the exam.

[@26.59]
When I came to study matrices,

[@27.89]
I had to memorize another set of formulas.

[@29.70]
Some might think “maths is beautiful,”
But I think it's a lot of formulas.

[@34.00]
So I didn’t understand maths well.

[@36.00]
Even the parts I do understand,
I don’t know what to do with them.

[@40.00]
Here, the determinant formula.

[@41.79]
ad - bc

[@44.00]
Why do I need to find “ad - bc?”

[@46.00]
So I didn’t study it well at that time.

[@48.00]
I got grade C+ in Math 1 and Math 2.

[@51.00]
That was around 2011.

[@53.00]
In 2018, I worked on a project.

[@57.00]
And many concepts and formulas that
I didn’t study well —

[@61.00]
They all come back.

[@63.00]
So I want to tell you about this project.

[@65.00]
By the way, it’s not a project at work.

[@69.00]
It’s a my side-project
that I did as a hobby.

[@72.00]
That project is called “ppqr.app.”

[@75.00]
I will introduce this project briefly.

[@77.00]
It is a web application that creates

[@79.71]
QR code for receiving money
via PromptPay.

[@82.00]
Mobile banking apps can scan the
QR code to transfer money.

[@87.00]
This app is optimized
to be used quickly and easily.

[@91.00]
Let’s say I went to eat with my friends.

[@93.00]
I paid first. We agreed to split evenly.
Each of us pays 80 baht.

[@99.00]
I can open the application,

[@102.00]
Type in “80” and show the QR code

[@105.00]
So that my friends can use
their mobile banking apps to scan —

[@108.00]
All of this — in less than 5 seconds.

[@110.00]


[@111.00]
Then I started to have
several PromptPay numbers.

[@114.00]
Now there are many e-wallet providers

[@117.18]
e.g. TrueMoney, K PLUS, etc.

[@120.00]
Before this app, I had to
go to the correct bank app.

[@123.00]
But now “ppqr.app” has 4 slots
for storing different PromptPay IDs.

[@128.00]
Previously this app was called
“promptpay2.me.”

[@131.91]
I showed this app to my friends
and got them to try it out —

[@135.34]
(It’s a web app, not a native app)

[@137.00]
I found that almost no one could
spelll PromptPay correctly first try!

[@142.00]
So I changed the name to “ppqr.app.”

[@144.00]
If anyone is interested, you can try it.

[@147.00]
There is one weird feature in the app.

[@150.00]
It is the animations within the app.

[@153.00]
When you enter the amount,
it has to generate a new QR code.

[@158.00]
But I don't want the QR code
to just change. It's too normal.

[@162.00]
I want the QR code to…

[@163.69]
pop out… like this.

[@166.00]


[@167.00]
I want it to pop out of the screen.

[@169.00]
I spent many days trying to do this.

[@173.00]
And the maths that I didn’t study well —

[@175.94]
They all came back.

[@177.00]
And I had to try to understand it again.

[@180.00]
And I thought: Things would be easier
had I studied maths well!

[@183.00]
But in the end, I got through.

[@185.00]
I got a new wacky feature.

[@187.00]
Is it useful?

[@188.78]
No.

[@190.00]
But I think it looks cool.

[@192.00]
And it's fun when to solve problems.

[@195.00]
And when I get through difficult problems,

[@197.00]
I feel like I have leveled up
in my programming journey,

[@201.00]
Having learned something new.

[@204.00]
Today, I want to share my experience,

[@207.00]
My story about this feature’s development.

[@209.00]
If you want to know how
this animation was created,

[@212.00]
I’ll tell you in the next 20 minutes.

[@214.00]
And if anyone is interested
in computer graphics,

[@217.00]
If you’re curious about
how computers render graphics,

[@220.00]
This may serve as a teaser for
what you might learn.

[@223.00]


[@224.00]
By the way, today’s content is very dense.

[@227.00]
My slides are about 200 pages.

[@229.00]
If you don’t understand some details,

[@232.00]
It's okay.

[@234.00]
At least you’ll see and hear some keywords

[@237.90]
And you can study it yourself
if you're interested.

[@241.39]
I got my inspirations from
many creators on YouTube

[@245.00]
who shares how they build a project.

[@248.00]
I think they are very eye-opening.

[@250.00]
I want to try to present similar content.

[@254.00]
Another thing is that it’s not like
I can do it in 2018 in a single try.

[@259.00]
In 2011 I got C+ grades.

[@261.00]
Then over time I slowly acquire
experience working on fun projects.

[@265.00]
Keep playing.

[@267.00]
This is the introduction for today's talk.

[@271.00]
Let me introduce myself briefly.

[@273.00]
My name is Thai.

[@274.00]
I'm a software engineer
at Eventpop, under Opn.

[@278.00]
Opn is a payment tech company.
We have a payment gateway.

[@283.16]
It used to be called Omise.
You might know about it.

[@286.51]
Besides being a product company,

[@288.00]
Opn also has a professional services team

[@291.00]
Like a combination of SI and consultant.

[@294.00]
Opn.Pro helps with digital transformation.

[@297.82]
We take on enterprise projects.

[@300.00]
Now I'm working on Eventpop.

[@303.00]
If anyone runs an event,
you’re welcome to try it out.

[@306.00]
And I have a YouTube channel.

[@308.00]
If you like this session,
please consider subscribing!

[@312.00]
The channel is dtinth.

[@315.00]
It’ll be on the last slide.

[@318.00]
Previously, I streamed this
live on Facebook.

[@324.00]
There are 2 parts totaling over 3 hours.

[@329.00]
And there are many parts that
I worked alone and didn’t stream.

[@333.00]
Today I’ll take that live content,
where I was unprepared and struggling —

[@339.00]
And retell the story in a way
that’s can be understood more easily.

[@342.00]
So let’s get into it!

[@345.00]
The app can create a QR code.

[@348.00]
But when changing the QR code,
it’s just a re-render.

[@351.00]
Now I want to put animations in.

[@353.00]
How do we do it?

[@355.00]
However, I don't want it to
affect the existing code too much.

[@362.00]
What should I do?

[@363.00]
I decided to divide it into 2 layers.

[@366.00]
The first layer is the original QR code.

[@370.00]
But when the number changes,

[@372.00]
And the new QR code is being rendered,

[@374.00]
I’ll compare each pixel.

[@377.00]
If the pixel changes,

[@378.95]
I’ll create a sprite, or a particle.

[@382.00]
And put it on another layer.

[@384.00]
When you put the two layers together,

[@386.00]
It will be the animation I want.

[@388.00]
Today we will focus on the effect layer.

[@392.00]
I'll show you slowly again.

[@395.00]
The one with the green halo
is the effect layer.

[@399.92]
Ok! Now, the first thing we have to do is…

[@403.00]
We have to render this one piece first

[@406.00]
Before we can render everything.

[@409.00]
Here comes the first problem.

[@411.00]
How to render a single particle?

[@413.00]
There’s also performance requirement:

[@415.00]
It must be small and fast.

[@418.00]
1. It must not make the app too big.

[@420.00]
Otherwise, it will load slowly.

[@422.00]
When the app loads slowly, it kinda
defeats the purpose, right?

[@424.98]
The 5 second rule.

[@426.00]
2. It must be fast.

[@428.00]
No matter how many QR code particles,

[@431.00]
It must always render at 60 fps.

[@434.00]
Otherwise, it may drain the battery.

[@438.00]
And it may not look smooth.

[@441.00]
When it comes to 3D effects,

[@444.00]
We may think of THREE.js.

[@446.00]
I tried it before.

[@448.00]
It's easy to use.

[@449.00]
Put the object in the scene.

[@451.00]
Put the camera, light, and color.

[@453.00]
And then we can render it
and get a beautiful scene.

[@456.00]
But the problem is
the library is quite big.

[@458.00]
The ppqr app is now about 52 KB.

[@462.00]
But if we put THREE.js in it,

[@463.46]
The app will be 4 times bigger.

[@465.00]
So I had to discard this choice.

[@468.62]
And I thought:

[@469.54]
Since I need to control
the total code size,

[@472.56]
I might as well implement it
without using a library.

[@475.00]
So that I can fully control
how much code I add in.

[@478.00]
There are two options.

[@479.00]
Use Canvas and WebGL.

[@482.00]
I've never used WebGL.

[@484.00]
So I tried to learn.

[@486.00]
There is a website called
WebGL Fundamentals.

[@489.00]
If you click on the first link,
(“Fundamentals”),

[@492.00]
You will find a code example
on how to render…

[@494.68]
A single triangle.

[@497.00]
I tried to implement it with Canvas.

[@499.00]
It looks like this.

[@500.00]
I set the color,

[@502.00]
Drawing a shape, and ordered it
to fill in the shape.

[@505.00]
But when it’s WebGL,

[@507.00]
I’m confused. I saw some C-like code
embedded in JavaScript.

[@510.00]
And there’s many unknown terms like

[@512.19]
Shader, Compile, Buffer, Bind Buffer,
Program, Vertex Attribute Array.

[@519.00]
I saw it and I was scared.

[@521.00]
So I was like, “Okay,
I’ll just use Canvas first.”

[@523.00]
The downside of Canvas is that
everything will work on the CPU.

[@528.00]
We can’t use GPU’s capabilities.

[@530.00]
But I think,

[@531.77]
“At least I’ll do the easy version first.
If it’s fast enough, then that’s great.”

[@536.14]
If it's not fast enough,
Then study more.

[@538.00]
So, let’s go to Canvas.

[@541.00]
How to use Canvas?

[@542.00]
Canvas 2D is an API on the web.

[@545.00]
That can draw 2D graphics.

[@547.00]
It’s like we have a blank sheet of paper.

[@549.00]
I can set its with and height.

[@551.00]
For instance, in this case, 500 by 500.

[@554.00]
And there’s a coordinate system
with an X axis and a Y axis.

[@558.00]
And there’s an origin point.

[@562.00]
The (0, 0) point will be on
the top left corner of the image.

[@565.00]
The bottom right corner,
well, it depends on the size

[@568.00]
In this case, (500, 500).

[@570.00]
When we draw a picture,

[@572.00]
We start with `.beginPath()`.

[@574.00]
And then we call `.moveTo(x, y)`.

[@576.00]
`moveTo` is like putting a pen
on the paper at the specified point.

[@580.00]
Starting from the origin,
145 pixels right, 350 pixels down —

[@584.00]
It’s like putting a pen at that point.

[@587.00]
`.lineTo(x, y)` is for drawing a line.

[@590.00]
Draw all four of them.

[@592.00]
And then `.closePath()`, which is like
drawing a line back to the starting point.

[@596.00]
We won't see the picture yet.

[@598.00]
Because we haven’t told it to draw.

[@600.00]
We have to set the color
and call `.fill()`.

[@604.00]
Or you can also use `.stroke()`

[@608.00]
Or you can use gradients.

[@610.00]
But for today’s problem,

[@612.00]
Just filling white in is enough.

[@614.00]
Now we might see our square as

[@616.00]
Four squares instead of four corners.

[@620.00]
That we get in our drawing.

[@622.00]
We can use these arrays to stack them into arrays.

[@625.00]
And write a function to loop.

[@627.00]
To draw this picture.

[@629.00]
The problem is that the square that you see

[@633.00]
The original is not here.

[@635.00]
The original is here.

[@637.00]
And how do we make it look like it's popping out here?

[@641.00]
Which makes me face the first problem.

[@644.00]
The effect that we're going to do is a three-dimensional effect.

[@647.00]
But our canvas has only two dimensions.

[@650.00]
How to fix it?

[@653.00]
The solution is to render the three-dimensional image

[@656.00]
Using two-dimensional canvas.

[@658.00]
Some of you may have studied art or drawing.

[@661.00]
It's a perspective drawing.

[@664.00]
So we can implement it.

[@666.00]
But before we get there,

[@668.00]
I have to be careful that

[@670.00]
I might not be able to do it.

[@672.00]
I'll try to do an easy animation.

[@674.00]
I'll try it.

[@676.00]
This one is not right. This one is right.

[@680.00]
We'll use the width-prime.

[@685.00]
And then we'll get the animation that's gone.

[@688.00]
We'll click the finger and it's gone.

[@690.00]
And then we'll come back to the upgrade.

[@693.00]
Back to our topic.

[@695.00]
I've studied how to draw a three-dimensional picture.

[@699.00]
I found that

[@701.00]
the convention is different from drawing two-dimensional pictures.

[@704.00]
A two-dimensional picture,

[@706.00]
The zero point is on the left.

[@708.00]
The y-axis is pointing down.

[@710.00]
When it's a three-dimensional picture,

[@712.00]
It's a zero point in the middle of the y-axis.

[@714.00]
Some people say that the z-axis is pointing up.

[@719.00]
But it's okay.

[@721.00]
For today, it's a y-axis.

[@723.00]
The y-axis points up.

[@725.00]


[@726.00]
It's gonna make me change the numbers.

[@730.00]
Calculate the numbers.

[@732.00]
But it makes the calculation easier.

[@735.00]
We're going to go into the three-dimensional world.

[@737.00]
So, besides the width and height,

[@739.00]
We'll have depth.

[@741.00]
Let me explain this picture first.

[@744.00]
The sharp point you see there.

[@746.00]
It's like our eyes.

[@748.00]
Looking at the drawing map.

[@750.00]
We call it the drawing surface.

[@752.00]
From the original two-dimensional.

[@754.00]
We'll have a z-axis.

[@756.00]
All the points in the drawing surface.

[@759.00]
The z-axis will be zero.

[@762.00]
The origin point, we'll have a zero point.

[@765.00]
One of them is a zero point.

[@767.00]
Because it's three-dimensional.

[@769.00]
It's in the middle of the picture.

[@771.00]
And besides that, we can set the distance of the eye.

[@774.00]
I've decided that our eyes.

[@777.00]
Look away from the picture.

[@779.00]
500 units.

[@781.00]
So, the eye's radius is 0.0500.

[@784.00]
Something like that.

[@786.00]
Okay, I'll go back to the beginning.

[@790.00]
Back to the original.

[@792.00]
This part is a square.

[@796.00]
And it's a square from the start.

[@798.00]
It's in the middle of the picture.

[@801.00]
What I have to do is move it out here.

[@804.00]
And make it pop out.

[@806.00]
I'll explain again.

[@808.00]
How to make it pop out.

[@811.00]
I have to find a way to draw.

[@813.00]
How to draw it.

[@816.00]
Make it look like it's popping out.

[@819.00]
Like this.

[@820.00]
So, let's look at another angle.

[@823.00]
Change to the side view.

[@825.00]
We'll see only the y-axis and z-axis.

[@827.00]
The x-axis will disappear.

[@829.00]
I want you to focus on the bottom of the square.

[@834.00]
Like this.

[@836.00]
Suppose there's a y-axis and z-axis here.

[@840.00]
What we can do is draw a line from our eyes.

[@844.00]
Through that point.

[@846.00]
And see the top of the square.

[@848.00]
We have to solve this problem.

[@852.00]
If the radius of the eye is 0.0500.

[@858.00]
Through that point.

[@860.00]
What will happen to this point?

[@862.00]
We only know the z-axis and z-axis.

[@864.00]
We can't draw it.

[@866.00]
Okay.

[@867.00]
When we find the problem like this.

[@869.00]
We can model it as a problem.

[@871.00]
The sum of the 3 squares.

[@873.00]
This is probably a math problem.

[@875.00]
We have to find the height of the big 3 squares.

[@879.00]
Let's start.

[@880.00]
We'll multiply the value we know.

[@882.00]
We'll get the height.

[@884.00]
The width of the big 3 squares and the small 3 squares.

[@886.00]
The height is the same.

[@888.00]
We'll get the problem of the 3 squares.

[@891.00]
We'll use it to make a sun.

[@893.00]
And we'll get the height of the big 3 squares.

[@896.00]
And we'll get the y value.

[@898.00]
And the x-axis is the same.

[@901.00]
We'll get 1 number.

[@903.00]
Now our 4 squares have 4 angles.

[@905.00]
We'll do all 4 of them.

[@907.00]
And we'll do the x-axis.

[@909.00]
We'll know that we'll find the impact point of each angle.

[@913.00]
And we can calculate that.

[@916.00]
If our 4 squares are jumping out.

[@918.00]
Where will it show up?

[@920.00]
How do we draw it?

[@922.00]
This is called perfect projection.

[@926.00]
It sounds like a very advanced technique.

[@929.00]
But actually it's using the y-axis or the y-axis.

[@934.00]
Now we draw the 3-dimensional picture with 2D canvas.

[@939.00]
Next, we have to solve the problem of putting the 4 squares.

[@945.00]
How do we place them in the middle of the picture?

[@952.00]
To create a square, we can look at the 4 points.

[@956.00]
Instead of each angle.

[@958.00]
Each point is called vertex.

[@961.00]
For example, the square is 50x50.

[@964.00]
The left point is the point of the y-axis.

[@969.00]
Most of the points in the picture are used by the original point.

[@976.00]
Most of the points are represented by the vector.

[@979.00]
Like this.

[@981.00]
Now we have all 4 points.

[@983.00]
We'll get a square.

[@985.00]
How do we move this square?

[@987.00]
We create a translation vector.

[@992.00]
We can connect the angles of the vectors to the angles of each point.

[@997.00]
It will make the square move up like this.

[@1000.00]
We can solve 2 problems.

[@1002.00]
The rest is just to make it jump out.

[@1005.00]
Now, how do we make this square jump out?

[@1008.00]
There are 2 problems.

[@1011.00]
We will solve each problem.

[@1014.00]
It consists of 1.

[@1016.00]
The movement or the space.

[@1019.00]
The movement is just like this.

[@1023.00]
There is also a rotation.

[@1027.00]
It rotates with the space.

[@1029.00]
When we combine these 2 problems,

[@1032.00]
It will look like this.

[@1035.00]
Let's solve each problem.

[@1039.00]
Let's start with jumping.

[@1041.00]
We have to calculate the vector.

[@1043.00]
How much time does the time of the t move like this?

[@1047.00]
For example, the vector must have a certain value.

[@1054.00]
I will look at it from another angle.

[@1057.00]
It is a straight line.

[@1059.00]
It is a straight movement.

[@1061.00]
S = Vt.

[@1063.00]
Physics is here.

[@1066.00]
If we look at the side,

[@1070.00]
We can see that the y-axis moves up and stops and moves down.

[@1074.00]
It is a movement in the direction of the y-axis.

[@1077.00]
If it is at the 1/2th of the 2nd world,

[@1080.00]
The physics formula is full.

[@1082.00]
When combined, it will be a projectile movement.

[@1085.00]
I have to say that I hardly understand this rotation.

[@1089.00]
But I will try to explain.

[@1091.00]
For rotation, we have to define 2 things.

[@1093.00]
1. The vector.

[@1094.00]
2. The angle.

[@1096.00]
Rotation is different from the movement.

[@1099.00]
Every point will move in the same direction.

[@1102.00]
The rotation will go in different directions.

[@1104.00]
But in the end, it will look like this.

[@1106.00]
This is 2D.

[@1109.00]
What if it is 3D?

[@1111.00]
If it is 2D, the angle is a point.

[@1116.00]
But if it is 3D, the angle is a vector.

[@1119.00]
I will replace the vector with this ball-plug.

[@1122.00]
The way to rotate the x-axis is to let the wood point to the x-axis.

[@1128.00]
And then rotate the y-axis.

[@1131.00]
And rotate the z-axis.

[@1135.00]
In addition to the x-axis, we can rotate any axis.

[@1139.00]
For example, insert a square vector and rotate it.

[@1145.00]
It will look like this.

[@1147.00]
How to implement?

[@1149.00]
I have to search on Google.

[@1151.00]
How to rotate the 3D vector.

[@1154.00]
I found this website.

[@1156.00]
There is a 5-way rotation formula.

[@1160.00]
I will write it down.

[@1164.00]
In short, the right side is the point that we want to rotate.

[@1170.00]
The middle is the rotation matrix.

[@1172.00]
I don't know what rotation matrix is.

[@1174.00]
I just found it from that website.

[@1176.00]
The left side is the point that we need to use.

[@1179.00]
As I said, I don't understand.

[@1181.00]
Yesterday, I went to practice talking.

[@1183.00]
Someone asked me if I knew the quaternion matrix.

[@1186.00]
I don't know.

[@1188.00]
I will try to understand the quaternion matrix.

[@1196.00]
But I didn't know it.

[@1198.00]
So I used this formula as a code.

[@1203.00]
With the power of quaternion, it came out like this.

[@1209.00]
I solved all 4 problems.

[@1211.00]
I created one part of the QR code.

[@1214.00]
The rest is to combine the solutions to solve the problem.

[@1218.00]
Compare with tera pixel.

[@1220.00]
If the color changes, create one sprite.

[@1223.00]
Each sprite has a random position.

[@1229.00]
The speed of movement, the speed of rotation, etc.

[@1233.00]
I used everything I presented earlier as a function.

[@1238.00]
When I put it together, I got the QR code.

[@1241.00]
But it was lagging.

[@1244.00]
It was lagging on my phone.

[@1247.00]
Because when I use a canvas to draw,

[@1250.00]
the CPU has to cut the part of the image to draw the pixel.

[@1256.00]
The CPU works very hard.

[@1258.00]
So I didn't open this feature for everyone to use.

[@1261.00]
If I open it for everyone to use, it will be a substitute for the app.

[@1265.00]
So I have to re-implement with WebGL.

[@1268.00]


[@1270.00]
But when I implemented WebGL,

[@1273.00]
I found that it was better to implement with Canvas first.

[@1276.00]
When I used WebGL directly without using a library,

[@1279.00]
I found that the calculation of the numbers didn't help.

[@1283.00]
WebGL helps just to calculate the data at the same time.

[@1286.00]
In the end, I had to implement all the calculation methods.

[@1289.00]
I had to practice writing new languages.

[@1291.00]
I had to write another language called GLSL.

[@1294.00]
It's a language that's similar to C Compile on the GPU.

[@1298.00]
GLSL helps calculate the matrix and vector.

[@1301.00]
JavaScript has to be divided into 5 parts.

[@1304.00]
GLSL has a matrix and a vector type.

[@1307.00]
It can be multiplied.

[@1308.00]
In addition, it helps draw many pixels at the same time.

[@1311.00]
But the ability is very basic.

[@1314.00]
It can't just draw a square.

[@1315.00]
The square that you see is made up of two triangles.

[@1319.00]
WebGL can draw it.

[@1321.00]
From the original data that is stored in the RAM,

[@1324.00]
and using the CPU to process the result,

[@1326.00]
we have to process it into a buffer.

[@1329.00]
Then we upload it to the GPU.

[@1332.00]
Then upload GLSL to the GPU to work.

[@1335.00]
Each of the three triangles will represent one triangle.

[@1340.00]
Each buffer has a different role.

[@1343.00]
The first two are for color.

[@1346.00]
The last two are for rotation.

[@1349.00]
This one makes it pop out.

[@1352.00]
And this one makes it bounce.

[@1354.00]
Something like this.

[@1355.00]
When we order the draw element,

[@1358.00]
the GPU will draw a whole bunch.

[@1361.00]
It makes the animation smooth and fast.

[@1365.00]
I hope I will get the answer.

[@1368.00]
What it uses after learning the numbers.

[@1371.00]
I will post all the code here.

[@1376.00]
Including the visualizations that you see in this slide.

[@1379.00]
There are all source codes.

[@1381.00]
You can go and see.

[@1382.00]
Before we go,

[@1383.00]
I'm from the Creator's Garden group.

[@1387.00]
We organize tech events.

[@1390.00]
Every event is free.

[@1392.00]
In the future, we have a plan to organize a creative coding meetup.

[@1396.00]
For those who are interested in drawing with code,

[@1399.00]
or creating art pictures, or anything else with code.

[@1402.00]
If you like this type, please stay tuned.

[@1404.00]
I don't know when it will be held.

[@1406.00]
That's all for today.

[@1409.00]
Thank you very much.

[@1411.00]
