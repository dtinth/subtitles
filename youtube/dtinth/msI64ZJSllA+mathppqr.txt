[@0.00]
Hello everyone.

[@2.00]
When I was a student,

[@7.00]
There was one very difficult subject.

[@10.54]
As you might have guessed,

[@12.26]
It was a math subject.

[@14.00]
Especially calculus, trigonometry,
vectors, and matrices.

[@18.00]
When I was studying, I wasn't into math.

[@21.00]
I had to memorize a lot of formulas.

[@22.87]
Here’s the derivatives formulas.

[@24.75]
I have to memorize it to take the exam.

[@26.59]
When I came to study matrices,

[@27.89]
I had to memorize another set of formulas.

[@29.70]
Some might think “maths is beautiful,”
But I think it's a lot of formulas.

[@34.00]
So I didn’t understand maths well.

[@36.00]
Even the parts I do understand,
I don’t know what to do with them.

[@40.00]
Here, the determinant formula.

[@41.79]
ad - bc

[@44.00]
Why do I need to find “ad - bc?”

[@46.00]
So I didn’t study it well at that time.

[@48.00]
I got grade C+ in Math 1 and Math 2.

[@51.00]
That was around 2011.

[@53.00]
In 2018, I worked on a project.

[@57.00]
And many concepts and formulas that
I didn’t study well —

[@61.00]
They all come back.

[@63.00]
So I want to tell you about this project.

[@65.00]
By the way, it’s not a project at work.

[@69.00]
It’s a my side-project
that I did as a hobby.

[@72.00]
That project is called “ppqr.app.”

[@75.00]
I will introduce this project briefly.

[@77.00]
It is a web application that creates

[@79.71]
QR code for receiving money
via PromptPay.

[@82.00]
Mobile banking apps can scan the
QR code to transfer money.

[@87.00]
This app is optimized
to be used quickly and easily.

[@91.00]
Let’s say I went to eat with my friends.

[@93.00]
I paid first. We agreed to split evenly.
Each of us pays 80 baht.

[@99.00]
I can open the application,

[@102.00]
Type in “80” and show the QR code

[@105.00]
So that my friends can use
their mobile banking apps to scan —

[@108.00]
All of this — in less than 5 seconds.

[@110.00]


[@111.00]
Then I started to have
several PromptPay numbers.

[@114.00]
Now there are many e-wallet providers

[@117.18]
e.g. TrueMoney, K PLUS, etc.

[@120.00]
Before this app, I had to
go to the correct bank app.

[@123.00]
But now “ppqr.app” has 4 slots
for storing different PromptPay IDs.

[@128.00]
Previously this app was called
“promptpay2.me.”

[@131.91]
I showed this app to my friends
and got them to try it out —

[@135.34]
(It’s a web app, not a native app)

[@137.00]
I found that almost no one could
spelll PromptPay correctly first try!

[@142.00]
So I changed the name to “ppqr.app.”

[@144.00]
If anyone is interested, you can try it.

[@147.00]
There is one weird feature in the app.

[@150.00]
It is the animations within the app.

[@153.00]
When you enter the amount,
it has to generate a new QR code.

[@158.00]
But I don't want the QR code
to just change. It's too normal.

[@162.00]
I want the QR code to…

[@163.69]
pop out… like this.

[@166.00]


[@167.00]
I want it to pop out of the screen.

[@169.00]
I spent many days trying to do this.

[@173.00]
And the maths that I didn’t study well —

[@175.94]
They all came back.

[@177.00]
And I had to try to understand it again.

[@180.00]
And I thought: Things would be easier
had I studied maths well!

[@183.00]
But in the end, I got through.

[@185.00]
I got a new wacky feature.

[@187.00]
Is it useful?

[@188.78]
No.

[@190.00]
But I think it looks cool.

[@192.00]
And it's fun when to solve problems.

[@195.00]
And when I get through difficult problems,

[@197.00]
I feel like I have leveled up
in my programming journey,

[@201.00]
Having learned something new.

[@204.00]
Today, I want to share my experience,

[@207.00]
My story about this feature’s development.

[@209.00]
If you want to know how
this animation was created,

[@212.00]
I’ll tell you in the next 20 minutes.

[@214.00]
And if anyone is interested
in computer graphics,

[@217.00]
If you’re curious about
how computers render graphics,

[@220.00]
This may serve as a teaser for
what you might learn.

[@223.00]


[@224.00]
By the way, today’s content is very dense.

[@227.00]
My slides are about 200 pages.

[@229.00]
If you don’t understand some details,

[@232.00]
It's okay.

[@234.00]
At least you’ll see and hear some keywords

[@237.90]
And you can study it yourself
if you're interested.

[@241.39]
I got my inspirations from
many creators on YouTube

[@245.00]
who shares how they build a project.

[@248.00]
I think they are very eye-opening.

[@250.00]
I want to try to present similar content.

[@254.00]
Another thing is that it’s not like
I can do it in 2018 in a single try.

[@259.00]
In 2011 I got C+ grades.

[@261.00]
Then over time I slowly acquire
experience working on fun projects.

[@265.00]
Keep playing.

[@267.00]
This is the introduction for today's talk.

[@271.00]
Let me introduce myself briefly.

[@273.00]
My name is Thai.

[@274.00]
I'm a software engineer
at Eventpop, under Opn.

[@278.00]
Opn is a payment tech company.
We have a payment gateway.

[@283.16]
It used to be called Omise.
You might know about it.

[@286.51]
Besides being a product company,

[@288.00]
Opn also has a professional services team

[@291.00]
Like a combination of SI and consultant.

[@294.00]
Opn.Pro helps with digital transformation.

[@297.82]
We take on enterprise projects.

[@300.00]
Now I'm working on Eventpop.

[@303.00]
If anyone runs an event,
you’re welcome to try it out.

[@306.00]
And I have a YouTube channel.

[@308.00]
If you like this session,
please consider subscribing!

[@312.00]
The channel is dtinth.

[@315.00]
It’ll be on the last slide.

[@318.00]
Previously, I streamed this
live on Facebook.

[@324.00]
There are 2 parts totaling over 3 hours.

[@329.00]
And there are many parts that
I worked alone and didn’t stream.

[@333.00]
Today I’ll take that live content,
where I was unprepared and struggling —

[@339.00]
And retell the story in a way
that’s can be understood more easily.

[@342.00]
So let’s get into it!

[@345.00]
The app can create a QR code.

[@348.00]
But when changing the QR code,
it’s just a re-render.

[@351.00]
Now I want to put animations in.

[@353.00]
How do we do it?

[@355.00]
However, I don't want it to
affect the existing code too much.

[@362.00]
What should I do?

[@363.00]
I decided to divide it into 2 layers.

[@366.00]
The first layer is the original QR code.

[@370.00]
But when the number changes,

[@372.00]
And the new QR code is being rendered,

[@374.00]
I’ll compare each pixel.

[@377.00]
If the pixel changes,

[@378.95]
I’ll create a sprite, or a particle.

[@382.00]
And put it on another layer.

[@384.00]
When you put the two layers together,

[@386.00]
It will be the animation I want.

[@388.00]
Today we will focus on the effect layer.

[@392.00]
I'll show you slowly again.

[@395.00]
The one with the green halo
is the effect layer.

[@399.92]
Ok! Now, the first thing we have to do is…

[@403.00]
We have to render this one piece first

[@406.00]
Before we can render everything.

[@409.00]
Here comes the first problem.

[@411.00]
How to render a single particle?

[@413.00]
There’s also performance requirement:

[@415.00]
It must be small and fast.

[@418.00]
1. It must not make the app too big.

[@420.00]
Otherwise, it will load slowly.

[@422.00]
When the app loads slowly, it kinda
defeats the purpose, right?

[@424.98]
The 5 second rule.

[@426.00]
2. It must be fast.

[@428.00]
No matter how many QR code particles,

[@431.00]
It must always render at 60 fps.

[@434.00]
Otherwise, it may drain the battery.

[@438.00]
And it may not look smooth.

[@441.00]
When it comes to 3D effects,

[@444.00]
We may think of THREE.js.

[@446.00]
I tried it before.

[@448.00]
It's easy to use.

[@449.00]
Put the object in the scene.

[@451.00]
Put the camera, light, and color.

[@453.00]
And then we can render it
and get a beautiful scene.

[@456.00]
But the problem is
the library is quite big.

[@458.00]
The ppqr app is now about 52 KB.

[@462.00]
But if we put THREE.js in it,

[@463.46]
The app will be 4 times bigger.

[@465.00]
So I had to discard this choice.

[@468.62]
And I thought:

[@469.54]
Since I need to control
the total code size,

[@472.56]
I might as well implement it
without using a library.

[@475.00]
So that I can fully control
how much code I add in.

[@478.00]
There are two options.

[@479.00]
Use Canvas and WebGL.

[@482.00]
I've never used WebGL.

[@484.00]
So I tried to learn.

[@486.00]
There is a website called
WebGL Fundamentals.

[@489.00]
If you click on the first link,
(“Fundamentals”),

[@492.00]
You will find a code example
on how to render…

[@494.68]
A single triangle.

[@497.00]
I tried to implement it with Canvas.

[@499.00]
It looks like this.

[@500.00]
I set the color,

[@502.00]
Drawing a shape, and ordered it
to fill in the shape.

[@505.00]
But when it’s WebGL,

[@507.00]
I’m confused. I saw some C-like code
embedded in JavaScript.

[@510.00]
And there’s many unknown terms like

[@512.19]
Shader, Compile, Buffer, Bind Buffer,
Program, Vertex Attribute Array.

[@519.00]
I saw it and I was scared.

[@521.00]
So I was like, “Okay,
I’ll just use Canvas first.”

[@523.00]
The downside of Canvas is that
everything will work on the CPU.

[@528.00]
We can’t use GPU’s capabilities.

[@530.00]
But I think,

[@531.77]
“At least I’ll do the easy version first.
If it’s fast enough, then that’s great.”

[@536.14]
If it's not fast enough,
Then study more.

[@538.00]
So, let’s go to Canvas.

[@541.00]
How to use Canvas?

[@542.00]
Canvas 2D is an API on the web.

[@545.00]
That can draw 2D graphics.

[@547.00]
It’s like we have a blank sheet of paper.

[@549.00]
I can set its with and height.

[@551.00]
For instance, in this case, 500 by 500.

[@554.00]
And there’s a coordinate system
with an X axis and a Y axis.

[@558.00]
And there’s an origin point.

[@562.00]
The (0, 0) point will be on
the top left corner of the image.

[@565.00]
The bottom right corner,
well, it depends on the size

[@568.00]
In this case, (500, 500).

[@570.00]
When we draw a picture,

[@572.00]
We start with `.beginPath()`.

[@574.00]
And then we call `.moveTo(x, y)`.

[@576.00]
`moveTo` is like putting a pen
on the paper at the specified point.

[@580.00]
Starting from the origin,
145 pixels right, 350 pixels down —

[@584.00]
It’s like putting a pen at that point.

[@587.00]
`.lineTo(x, y)` is for drawing a line.

[@590.00]
Draw all four of them.

[@592.00]
And then `.closePath()`, which is like
drawing a line back to the starting point.

[@596.00]
We won't see the picture yet.

[@598.00]
Because we haven’t told it to draw.

[@600.00]
We have to set the color
and call `.fill()`.

[@604.00]
Or you can also use `.stroke()`

[@608.00]
Or you can use gradients.

[@610.00]
But for today’s problem,

[@612.00]
Just filling white in is enough.

[@614.00]
Now we might see our square as

[@616.39]
A collection of 4 coordinates, which
represents the 4 corners of our square.

[@622.00]
We can use put them into an array,

[@625.00]
And write a function to loop over it
to draw this picture.

[@631.04]
However, the square you see here
was not originally is here —

[@635.00]
It was there.

[@637.00]
How do we make it look like
it’s popping out here?

[@642.29]
And so comes the first problem:

[@644.91]
Our animation is 3D, but our canvas is 2D.

[@651.56]
How to fix it?

[@653.00]
The solution, of course, is to render
the 3D image on a 2D canvas!

[@658.00]
Some of you may have studied it
in the art or drawing classes.

[@661.00]
“perspective drawing.”

[@664.00]
So we are going to implement it.

[@666.00]
But before we get there,

[@668.00]
In case I couldn’t do it, at least
I want to do a simpler animation.

[@674.00]
So let’s try that first!

[@676.14]
-

[@678.45]
No, that’s not the animation.

[@679.84]
That’s a bug.

[@680.82]
-

[@683.65]
It should be “width, height”.

[@685.00]
And now I got a disintegrating effect.

[@689.74]
-

[@690.58]
Then I can upgrade this to the next level.

[@693.00]
Back to our topic.

[@695.00]
I've studied how to draw 3D pictures.

[@700.33]
I found that its convention is
different from drawing 2D pictures.

[@704.00]
In 2D, (0, 0) is on the top left,
with the y-axis pointing down.

[@709.43]
But in 3D, the origin is in the middle,
with the y-axis pointing up.

[@714.00]
Some people will argue that
it’s the z-axis that should point up.

[@719.00]
But whatever, for today,
the y-axis points up.

[@723.00]
The y-axis points up.

[@725.00]
-

[@726.00]
So I’ll have to account for that
when calculating the coordinates.

[@732.00]
But overall, it makes
the calculation easier.

[@735.00]
We're going into the 3rd dimension.

[@737.66]
So, besides the width and height,

[@739.76]
We’ll have depth as well.

[@741.00]
Let me explain this picture first.

[@744.00]
The sharp point you see there.

[@746.00]
It's like our eye.

[@748.00]
Looking at the drawing surface

[@752.00]
From 2 axes, x and y,

[@754.13]
now we have the z-axis.

[@756.00]
All the points on the drawing surface.
will have its z value = 0.

[@762.00]
The origin point gets another zero,
so now it’s (0, 0, 0), because it’s 3D.

[@766.61]
It's in the middle of the picture.

[@771.00]
And besides that, we can set
the distance of the eye.

[@774.00]
In this example, the eye is
500 units away from the drawing.

[@781.52]
So, the eye’s position is (0, 0, 500).

[@786.00]
Okay, I’ll revert this animation
and go back to the beginning.

[@792.00]
This piece starts off a square.

[@798.00]
It was in the middle of the picture.

[@801.00]
I have to move it to the correct place.

[@804.00]
I’ll explain later on
how to pop it out like that.

[@808.93]
But let’s assume it’s
already there for now.

[@811.00]
I’ll have to find a way to draw it…

[@816.00]
In a way that makes it
look like it’s popping out…

[@819.00]
Like this.

[@820.00]
So, let's look at it from another angle.

[@823.00]
Change to the side view.

[@825.00]
We’ll see only the y-axis and z-axis.

[@827.00]
The x-axis will disappear.

[@829.00]
I want you to focus on
the bottom corner of the square.

[@836.00]
Suppose its coordinate is as shown here,

[@840.00]
What we can do is:

[@841.73]
Draw a line from our eyes,
through that point,

[@845.56]
And find out where it lands
on the drawing surface.

[@851.24]
We have to solve this problem.

[@853.94]
Drawing a line from the eye
at (0, 0, 500) through that point.

[@860.00]
How to find out where it lands?

[@862.00]
We only know that z = 0
as it’s on the drawing surface.

[@866.00]
Okay.

[@867.00]
When we find the problem like this.

[@869.00]
We can model it as…

[@871.31]
A problem of similar triangles.

[@875.00]
I have to find the height
of the big triangle.

[@879.00]
Let's start.

[@880.00]
Using the values we know,
we can find the widths.

[@886.00]
We do the same to the height.

[@888.00]
And now we have our problem statement.

[@891.00]
Solve it using the Rule of Three,

[@894.44]
And we’ll get the height
of the big triangle.

[@896.53]
And we’ll get the y value.

[@898.00]
For the x-axis, we do the same
and we’ll get another number.

[@903.00]
Now our 4 squares have 4 corners.

[@905.00]
So we do the same to all 4 of them.

[@909.00]
We can now find the landing point
through each corner.

[@913.00]
And we can now calculate that —

[@916.00]
If our squares is jumping out,
where will it show up on the drawing?

[@920.00]
Now we know how to draw it.

[@922.00]
This is called “perspective projection.”

[@926.00]
It sounds like a very advanced technique.

[@929.00]
But actually it’s an application of
the similar triangles problem.

[@934.00]
Now we can draw 3D shapes
using a 2D canvas.

[@939.00]
Next, we have to solve the problem of
putting the square in the right place.

[@945.22]
-

[@946.91]
First, how do we place a square
in the middle of the picture?

[@952.00]
To create a square,

[@953.20]
We can use 4 points to
represent the 4 corners.

[@958.00]
Each point is called a vertex.

[@961.00]
In this example, the square is 50x50.

[@964.00]
The top left corner is at this coordinate.

[@970.11]
The points will be represented
by a vector from the origin.

[@976.58]
We use vectors to represent vertices

[@979.79]
Something like this.

[@981.00]
Now we have all 4 points.

[@983.00]
We’ll get a square.

[@985.00]
How do we move this square?

[@987.00]
We create another vector,
a “translation” vector.

[@992.00]
We can connect the tail of this vector
to the heads of each point’s vector.

[@997.00]
It will make the square move up like this.

[@1000.00]
I solved the first 2 problems.

[@1002.00]
Finally, I have to make it jump out.

[@1005.00]
How to do that?

[@1008.00]
There are 2 sub-problems.

[@1011.00]
We will solve each problem.

[@1014.00]
It consists of: 1. Translation.

[@1019.00]
The movement looks like this.
It’s just jumping out.

[@1023.00]
And, 2. Rotation.

[@1027.00]
The rotation looks like this.

[@1029.00]
When we combine these 2 sub-problems,

[@1032.00]
It will look like this.

[@1035.00]
So, let’s solve each problem.

[@1039.00]
Let's start with jumping.

[@1041.00]
We have to find the translation vector.

[@1043.91]
At time t, how much does the square
should move away from its place?

[@1047.00]
Let’s say, t seconds passed.

[@1051.45]
How to find the appropriate yellow vector?

[@1054.00]
I will look at it from another angle.

[@1057.00]
From the top, you see
it’s a straight line.

[@1059.00]
This is linear movement.

[@1061.00]
s = vt.

[@1063.00]
Physics has entered the chat.

[@1066.00]
If we look at it from the side,

[@1070.00]
We can see that in the y-axis,
it moves up, and stops, and moves down.

[@1074.00]
That’s motion under gravity.

[@1077.00]
h = ut - ½gt².

[@1080.00]
When combined, it will be
a projectile movement.

[@1085.00]
For rotation, I have to say that
I hardly understand it at all.

[@1089.00]
But I will try to explain anyways.

[@1091.00]
For rotation, we have to define 2 things.

[@1093.00]
1. The axis.

[@1094.00]
2. The angle.

[@1096.00]
Rotation is different from translation.

[@1098.69]
For translation, every point
will move in the same direction.

[@1101.72]
But in rotation, each point
will move differently.

[@1103.94]
But in the end, it will look like this.

[@1106.00]
But that’s 2D rotation.

[@1109.00]
What if it is 3D?

[@1111.00]
In 2D, the angle is a point.

[@1116.00]
But in 3D, the angle is a vector.

[@1119.00]
I’ll use this stick to
represent that vector.

[@1122.00]
To rotate around the x-axis,

[@1125.64]
Point the stick along
the x-axis and rotate.

[@1129.24]
Around the y-axis looks like this.

[@1132.71]
And around the z-axis looks like this.

[@1135.00]
In addition to the main axes, actually
we can rotate around any axis,

[@1139.00]
As you can see in the example.

[@1145.00]
It will look like this.

[@1147.00]
How to implement?

[@1149.00]
I searched on Google, how to rotate
the 3D vector around a 3D axis.

[@1154.00]
I found this web page that
gives me the rotation formula.

[@1158.95]
It’s five lines long.

[@1161.58]
I reformatted it a little bit.

[@1164.00]
In short, the right side is
the point that we want to rotate.

[@1170.00]
The middle is the rotation matrix.

[@1172.20]
It’s black magic to me.
I don’t understand it at all.

[@1174.78]
I just copied it from there.

[@1176.00]
The left side is the resulting point.

[@1179.00]
As I said, I don’t understand it at all.

[@1181.00]
Yesterday, I practiced this talk,

[@1183.00]
And an audience asked me if I knew
what a QuAtErNiOn MaTrIx is.

[@1185.60]
And I was like,

[@1186.53]
Nope.

[@1188.00]
To make it better, I will have to
re-learn the fundamentals

[@1192.52]
So I can understand how the
matrix in the middle came to be.

[@1196.00]
But that day hasn’t come yet.

[@1198.00]
So I just took the formula and
turned it into JavaScript code.

[@1203.00]
And with the power of mathematics,

[@1207.22]
It worked!

[@1209.00]
I solved all 4 problems.

[@1211.00]
I can now create one piece of the QR code.

[@1214.00]
The rest is to combine the solutions
and solve the main problem.

[@1218.00]
Compare each pixel.

[@1220.00]
If the color changes, create a sprite.

[@1223.00]
Each sprite has a position.

[@1228.19]
Randomize the speed of movement,
the speed of rotation, etc.

[@1233.00]
I used everything I presented earlier
and put it into the drawing function.

[@1238.00]
When I put it together,
I got the animation I want.

[@1241.00]
But it wasn’t smooth.

[@1243.96]
Sometimes it even froze.

[@1245.93]
It was lagging on my phone.

[@1247.00]
Because when I use a canvas to draw,

[@1250.00]
The CPU has to loop through each piece,
calculate, and draw each pixel one by one.

[@1256.00]
The CPU works very hard.

[@1258.00]
So I didn’t enable this feature
for everyone to use.

[@1261.00]
Otherwise it might become
a battery drainer app.

[@1265.00]
So I have to re-implement with WebGL.

[@1268.00]
-

[@1270.00]
But when I implemented in WebGL,

[@1273.00]
I realized it was a good thing I tried
implementing it with Canvas first.

[@1276.00]
When I used WebGL directly
without using a library,

[@1279.00]
I found that WebGL doesn’t help at all
with the maths formulas involved.

[@1283.00]
WebGL just helps parallelize
the calculation and make it faster.

[@1286.00]
But the formula shown before,
I still had to implement it all —

[@1289.88]
In another language.

[@1291.00]
Now I can’t just write JavaScript;
I also had to write GLSL.

[@1294.00]
It's a C-like language that can be
compiled to run on a GPU.

[@1298.00]
GLSL also helps with multiplying
vectors and matrices.

[@1301.00]
In JavaScript, I’d have to
spell out each element.

[@1304.00]
But in GLSL, there’s a
built-in matrix and a vector types.

[@1306.35]
They can be multiplied together easily.

[@1308.00]
In addition, it helps with drawing
many pixels at the same time.

[@1311.00]
But it’s ability is very basic.

[@1313.80]
It can't even draw a square.

[@1315.61]
Each square that you see here

[@1317.55]
Is made up of two triangles.

[@1319.00]
Then WebGL can draw it.

[@1321.00]
From the original data that is
stored in the RAM (JavaScript heap)

[@1324.00]
And processed by the CPU,

[@1326.00]
I had to process it into a buffer
and upload it to the GPU first.

[@1332.00]
And also compiled and upload the
GLSL program for the GPU to work with.

[@1335.00]
Every 3 lines will represent one triangle.

[@1340.00]
Each buffer has a different role.

[@1343.33]
The first two are for putting the
triangles together and setting its color.

[@1347.68]
The last two are for rotation.

[@1349.00]
This one places it at the right place.

[@1352.00]
And this one makes it pop out.

[@1354.00]
Something like this.

[@1355.00]
When we call `drawElements`,
the GPU will draw a whole image.

[@1361.00]
Now the animation is smooth and fast.

[@1365.00]
I hope you’ll see how maths
can one day become very useful!

[@1371.00]
I will post all the code here.

[@1376.00]
Including the visualizations
that you see in the slides.

[@1379.00]
The source codes are available.

[@1381.00]
You can go and see.

[@1382.00]
Before we go,

[@1383.00]
I'm from the Creatorsgarten group.

[@1387.00]
We organize free tech events.

[@1392.00]
In the future, we plan to organize
a creative coding meetup.

[@1396.00]
For those who are interested
in making arts with code,

[@1402.00]
If you like this type, please stay tuned.

[@1404.00]
I don't know when it will be held.

[@1406.00]
But that’s all for today.

[@1409.00]
Thank you very much.

[@1411.00]
-
