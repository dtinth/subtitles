[@0.00]
The other day, I was on GitHub

[@2.31]
and stumbled upon the LINE MAN Wongnai
Mysterious Code Challenge.

[@5.84]
Seems like it asks you to decode
something that is base64-encoded

[@12.00]
and then doing something with the answer.

[@14.00]
When I saw it, I thought
this would be a good exercise

[@17.00]
I want to try to solve this challenge

[@18.68]
without using a computer.

[@20.00]
I want to try to solve it by hand

[@21.75]
and see how it goes.

[@23.00]
But first, what is Base64?

[@26.00]
Why do we use Base64?

[@28.00]
It's a way to represent data that
may or may not be text.

[@33.00]
(like pictures, etc.)

[@35.00]
We call them binary data.

[@37.00]
Convert binary data into text.

[@40.00]
For example, I have a picture file.

[@43.00]
I try to open it with a text editor.

[@47.00]
I'll force it to open.

[@49.00]
It turns out that when viewed as text,

[@51.44]
I see a lot of strange symbols.

[@54.00]
I copied that text to a new file
and saved it as a picture file.

[@59.00]
Now the new file can't be opened.

[@61.00]
The data has been corrupted.

[@63.00]
If we want to convert this file into text

[@66.41]
in a way that we can copy to other places
and still retain the data correctly,

[@70.04]
What should we do?

[@71.00]
First of all,

[@71.90]
let’s see what our file really looks like.

[@75.00]
I wrote some code to read the file
and display its contents.

[@79.00]
You will see that this file is
made up of a bunch of numbers.

[@82.00]
Each number is called bytes,

[@84.55]
which is between 0 to 255.

[@87.00]
(8-bit numbers)

[@89.00]
Actually, I can copy this number
and use it directly.

[@92.00]
I created another program that packs
these numbers back into a new file.

[@96.00]
-

[@98.00]
Here’s the program.

[@100.00]
I’ll try to run it.

[@102.00]
We got the same file.

[@104.00]
Okay, this method works.

[@106.00]
But look at the data that came out.

[@108.00]
You'll see that it's pretty long.

[@110.54]
24 lines of numbers.

[@112.00]
There are other ways of converting
binary data into text

[@115.00]
that produces a shorter result.

[@117.00]
Instead of using decimal numbers,
we can try using base-16 numbers.

[@121.00]
(Hexadecimal, or in short, hex.)

[@124.00]
You'll get this kind of data.

[@126.00]
Now it’s shorter, just 14 lines.

[@129.00]


[@130.00]
Yet another way is to use Base64.

[@132.00]
The result is even shorter.

[@135.00]
Just 10 lines.

[@137.00]
Base64 is a standardized encoding

[@141.00]
and is widely used.

[@142.91]
For example,

[@143.75]
I’ll copy this base64-encoded image

[@146.00]
and put it in an HTML file.

[@149.00]
We can directly insert images
into HTML code.

[@152.00]
The browser can display it as a picture.

[@155.00]
Without having to save
the picture as another file.

[@158.00]
Here’s another interesting example.

[@160.45]
RFCs are internet standards documents.

[@166.47]
These standards are being documented

[@169.62]
long before the invention of
things like Word and HTML.

[@172.00]
So they are plain text files.

[@174.00]
Nowadays, RFC are still published
as text files.

[@178.00]
I found an RFC

[@181.00]
about receiving and sending audio data.

[@185.00]
This RFC file is longer than 300 pages.

[@187.00]
The first 160 pages will explain
how this codec works.

[@190.00]
The team that developed this standard
also has an example code.

[@193.00]
They compressed it into a gzip archive,

[@197.00]
encoded it with Base64,

[@199.00]
and put it in this document.

[@201.00]
Which are the remaining 160 pages.

[@204.00]
Now you know what Base64 is
and what they are for.

[@210.00]
Next, let’s see how Base64 encoding works.

[@213.00]
We’ll look at the original file.

[@215.00]
But this time we’ll focus only
on the first 12 bytes.

[@218.00]
I changed the color so it’s easier to see.

[@221.00]
Now I'll write each number in base 2.

[@225.00]
Each byte is made of 8 bits,

[@228.00]
so I'll draw some lines to separate them.

[@233.00]
To encode it in Base64,
we regroup the numbers

[@236.00]
from groups of 8 bits
into groups of 6 bits.

[@240.00]
After regrouping,

[@242.23]
I’ll convert them back to decimal.

[@243.83]
and here are the results.

[@245.00]
Then each number is represented by
a symbol corresponding to that number,

[@249.00]
which we can look up in the Base64 table.

[@254.00]
For example, the number 34
corresponds to the lowercase i.

[@257.00]
Since each group has only 6 bits,

[@261.00]
so there are 2⁶ = 64 possible symbols.

[@265.00]
Which is why it’s called Base64.

[@267.00]
Okay, let’s get back to our challenge.

[@270.00]
The video I’ll play from here

[@272.00]
is the recording of when I solved it

[@275.00]
before producing the explainations
you saw in the beginning of this video.

[@279.00]
Note: I explained the encoding process

[@282.00]
but in this challenge I have to decode it.

[@284.00]
So, I have to do it in reverse.

[@286.00]
Let's see.

[@287.00]
-

[@289.00]
I started by writing the Base64 table.

[@292.00]
I couldn’t remember the whole table,

[@294.00]
But I remember that it starts
with uppercase letters A to Z.

[@298.00]
Then lowercase letters a to z.

[@300.00]
Then the numbers.

[@303.00]
Then the + and /.

[@306.00]
This table is different from
the one in Wikipedia:

[@310.00]
I’m using base 16 here, where
each digit ranges from 0-9 and A-F.

[@316.00]
When I do it by hand,
I think this way is easier than base 10.

[@320.00]
Let's move on.

[@322.00]
I created another table

[@324.00]
to convert between base 4 and base 16.

[@328.00]
Then I started decoding.

[@331.00]
I look up each letter to find which
column and row they correspond to

[@335.00]
and write the column and row as base 16.

[@338.00]
-

[@340.00]
Then, I converted from base 16 to base 4.

[@344.00]
The method is the same,

[@345.64]
but I used the table on the left instead.

[@348.00]
Each letter corresponds to
three base-4 numbers.

[@352.00]
Which is equal to 6 bits.

[@354.00]
I used base-4 here

[@357.02]
because it’s more convenient
and less error prone than base-2.

[@361.00]
I regrouped the numbers

[@362.08]
from 6 bits in each group
to 8 bits in each group.

[@364.00]
When there are empty space in a group, 

[@367.00]
I have to bring in more letters
so that they all the 8 bits are filled.

[@370.00]
Okay, I’ve regrouped them.

[@372.00]
Next, I’ll convert the numbers
from base-4 back to base-16.

[@377.00]
Now we have a hex representation.

[@381.00]
I see a very good signal.

[@383.00]
Each byte starts with the number 6.

[@386.00]
But if some byte starts with
something strange number, like a C,

[@389.00]
I can check if I’m doing something wrong.

[@393.00]
Next, I’ll write the ASCII table.

[@395.00]
I couldn’t remember the ASCII table,

[@397.00]
but I remember that an uppercase A is 65
and a lowercase a is 97.

[@402.00]
When converted to hexadecimal,
we now know that an uppercase A is hex 41

[@405.00]
and a lowercase a is hex 61.

[@408.00]
I couldn’t remember the rest,
so I leave them blank.

[@411.00]
Now I have this table,

[@412.10]
I can convert each byte
into the corresponding character.

[@414.60]
-

[@417.00]
Then I noted them down

[@419.71]
at the bottom right.

[@422.00]
Okay, first part done.

[@424.00]
Let’s do the rest, same way as before.

[@427.00]
Some of you may wonder
why I did this to myself.

[@432.00]
What’s the use?

[@434.00]
I think it’s a good exercise for me

[@436.88]
to practice computational thinking.

[@440.00]
I work with computers almost every day.

[@442.00]
Having a strong mental model and a firm
understanding on how computers work

[@447.00]
help me write computer programs
with less headache.

[@450.00]
Less fighting with a computer.

[@453.00]
For example, if you don’t know how
JavaScript deals with decimal numbers,

[@457.34]
you might get confused when you find out
that in JavaScript, 0.1 + 0.2 != 0.3.

[@464.00]
Some may argue that the computer is wrong.

[@467.00]
But in most cases,

[@468.87]
that’s just how the computer
is programmed to behave.

[@471.87]
The only thing I can do

[@473.25]
is to adjust my understanding to match
how the computer actually works.

[@478.00]
If we have a deep understanding of how
things work under the hood,

[@481.06]
when we encounter problems
when writing programs

[@483.26]
or when our code doesn’t behave
the way we want it to,

[@486.00]
we can find the root of the problem

[@489.00]
and fix the problems systematically.

[@492.00]
Okay, now I’ve decoded almost all of them.

[@495.00]
But I didn’t know what hex 3A
corresponds to in ASCII.

[@502.00]
So, I put a question mark there.

[@505.00]
Then I noticed that the message contains
many small letters followed by a capital.

[@510.55]
So I thought that the message
may be written backwards.

[@514.00]
I rearranged the letters

[@516.00]
and saw the message. Problem solved.

[@518.00]
Afterwards, I checked the ASCII table.

[@520.00]
Turns out hex 3A is the colon sign.

[@523.00]
It took me about 45 minutes
to solve this problem by hand.

[@527.00]
But if I solve it with code --

[@528.10]
I’ll use JavaScript as it’s the language
I’m most familiar with.

[@531.00]
I take the challenge text
and pass it through `atob`.

[@534.00]
This function decodes base64 for us.

[@536.00]
I noticed that there are small letters
followed by a capital letter

[@540.00]
so I thought it’s written backwards.

[@543.00]
I separated the string into
an array of letters

[@545.00]
then reverse that array

[@547.00]
and connect them back
to obtain the message.

[@550.00]
Oh, and there’s one more thing.

[@552.00]
In the Base64 array,
there’s an equal sign

[@555.00]
that I haven’t talked about yet,

[@556.39]
but I’m lazy now

[@557.52]
so find the answer yourself:

[@559.00]
What does `=` means in Base64.

[@561.00]
And if you found out the answer, share
your explanation in the comments below!

[@565.00]
Thank you for watching!

[@567.01]
-